(load "../ch03/3.25.scm")

(define (make-machine ops controller-text)
  (let ((machine (make-new-machine)))
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence) (assemble controller-text machine))
    machine))


;;registers
(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set) (lambda (value) (set! contents value)))
            ((eq? message 'name) name)
            (else (error "Unknown request -- REGISTER" message))))
    dispatch))
(define (get-contents register) (register 'get))
(define (set-contents! register value) ((register 'set) value))
(define (get-name register) (register 'name))


;;stack
(define (make-stack)
  (let ((s (make-table))
        (number-pushes 0)
        (max-depth     0))
    (define (push reg)
      (let ((reg-stack ((s 'lookup) (list (get-name reg)))))
        (set! number-pushes (+ number-pushes 1))
        (if reg-stack
            (begin
              ((s 'insert!) (list (get-name reg)) (append (list (get-contents reg)) reg-stack))
              (if (< max-depth (+ (length reg-stack) 1))
                  (set! max-depth (+ (length reg-stack) 1))))
            (begin
              ((s 'insert!) (list (get-name reg)) (list (get-contents reg)))
              (if (= max-depth 0) (set! max-depth 1))))))
    (define (pop reg)
      (let ((reg-stack ((s 'lookup) (list (get-name reg)))))
        (if (or (null? reg-stack) (false? reg-stack))
            (error "Empty stack -- POP" (get-name reg))
            (let ((top (car reg-stack)))
              ((s 'insert!) (list (get-name reg)) (cdr reg-stack))
              top))))
    (define (print-statistics)
      (newline)
      (display (list 'total-pushes  '= number-pushes
                     'maximum-depth '= max-depth)))
    (define (initialize)
      (set! s (make-table))
      (set! number-pushes 0)
      (set! max-depth 0))
    (define (dispatch message)
      (cond ((eq? message 'contents)         s)
            ((eq? message 'push)             push)
            ((eq? message 'pop)              pop)
            ((eq? message 'print-statistics) (print-statistics))
            ((eq? message 'initialize)       (initialize))
            (else (error "Unknown request -- STACK" message))))
    dispatch))

(define (pop stack reg) ((stack 'pop) reg))
(define (push stack reg) ((stack 'push) reg))


;;base machine
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (instr-count 0)
        (trace-flag 'off)
        (current-label '())
        (current-shift  1)
        (breakpoints (make-table)))
    (let ((the-ops (list (list 'initialize-stack (lambda () (stack 'initialize)))))
          (register-table (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table (cons (list name (make-register name)) register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (begin
                (allocate-register name)
                (lookup-register name)))))
      (define (trace instruction)
        (if (eq? trace-flag 'on)
            (let ((label (instruction-label instruction)))
              (newline)
              (if (not (null? label))
                  (display (list 'label: label '>>>> (instruction-text instruction)))
                  (display (instruction-text instruction))))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                (let ((label (instruction-label (car insts))))
                  (if (null? label)
                      (set! current-shift (+ current-shift 1))
                      (begin
                        (set! current-label label)
                        (set! current-shift 1)))
                  (if (has-breakpoint? current-label current-shift)
                      (begin
                        (newline)
                        (display (list 'label: current-label 'shift: current-shift))
                        'break)
                      (begin
                        (set! instr-count (+ instr-count 1))
                        (trace (car insts))
                        ((instruction-execution-proc (car insts)))
                        (execute))))))))
      (define (proceed)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                (set! instr-count (+ instr-count 1))
                (trace (car insts))
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (has-breakpoint? label shift)
        (let ((label-breakpoints ((breakpoints 'lookup) (list label))))
          (and label-breakpoints (memq shift label-breakpoints))))
      (define (add-breakpoint label shift)
        (let ((label-breakpoints ((breakpoints 'lookup) (list label))))
          (if label-breakpoints
              (if (not (memq shift label-breakpoints))
                  ((breakpoints 'insert!) (list label) (append (list shift) label-breakpoints)))
              ((breakpoints 'insert!) (list label) (list shift)))))
      (define (remove-breakpoint label shift)
        (let ((label-breakpoints ((breakpoints 'lookup) (list label))))
          (if (memq shift label-breakpoints)
              ((breakpoints 'insert!) (list label) (filter (lambda (sh) (not (eq? sh shift))) label-breakpoints)))))
      (define (remove-all-breakpoints)
        (set! breakpoints (make-table)))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set! instr-count 0)
               (set-contents! pc the-instruction-sequence)
               (set! current-label '())
               (set! current-shift  1)
               (execute))
              ((eq? message 'install-instruction-sequence) (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register)      lookup-register)
              ((eq? message 'install-operations) (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'instr-count) (lambda () (newline) (display (list 'instr-count '= instr-count))))
              ((eq? message 'trace-on)  (set! trace-flag 'on))
              ((eq? message 'trace-off) (set! trace-flag 'off))
              ((eq? message 'add-breakpoint)         add-breakpoint)
              ((eq? message 'remove-breakpoint)      remove-breakpoint)
              ((eq? message 'remove-all-breakpoints) remove-all-breakpoints)
              ((eq? message 'proceed)                proceed)
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (start machine) (machine 'start))
(define (get-register-contents machine register-name)
  (get-contents (get-register machine register-name)))
(define (set-register-contents! machine register-name value)
  (set-contents! (get-register machine register-name) value)
  'done)
(define (get-register machine reg-name) ((machine 'get-register) reg-name))
(define (set-breakpoint machine label shift) ((machine 'add-breakpoint) label shift))
(define (cancel-breakpoint machine label shift) ((machine 'remove-breakpoint) label shift))
(define (cancel-all-breakpoints machine) ((machine 'remove-all-breakpoints)))
(define (proceed-machine machine) ((machine 'proceed)))


;;assembler
(define (assemble controller-text machine)
  (extract-labels controller-text
                  (lambda (insts labels)
                    (update-insts! insts labels machine)
                    insts)))

(define (extract-labels text receive)
  (if (null? text)
      (receive '() '())
      (extract-labels (cdr text)
                      (lambda (insts labels)
                        (let ((next-inst (car text)))
                          (if (symbol? next-inst)
                              (begin
                                (if (not (null? insts))
                                    (set-instruction-label! (car insts) next-inst))
                                (receive insts (cons (make-label-entry next-inst insts) labels)))
                              (receive (cons (make-instruction next-inst) insts) labels)))))))

(define (update-insts! insts labels machine)
  (let ((pc (get-register machine 'pc))
        (flag (get-register machine 'flag))
        (stack (machine 'stack))
        (ops (machine 'operations)))
    (for-each
     (lambda (inst)
       (set-instruction-execution-proc!
        inst
        (make-execution-procedure (instruction-text inst) labels machine pc flag stack ops)))
     insts)))

(define (make-instruction text) (list text '() '()))
(define (instruction-text  inst) (car inst))
(define (instruction-label inst) (cadr inst))
(define (set-instruction-label! inst label) (set-car! (cdr inst) label))
(define (instruction-execution-proc inst) (cddr inst))
(define (set-instruction-execution-proc! inst proc) (set-cdr! (cdr inst) proc))

(define (make-label-entry label-name insts) (cons label-name insts))
(define (lookup-label labels label-name)
  (let ((val (assoc label-name labels)))
    (if val
        (cdr val)
        (error "Undefined label -- ASSEMBLE" label-name))))

;;execution procedures
(define (make-execution-procedure inst labels machine pc flag stack ops)
  (cond ((eq? (car inst) 'assign)  (make-assign  inst machine labels ops pc))
        ((eq? (car inst) 'test)    (make-test    inst machine labels ops flag pc))
        ((eq? (car inst) 'branch)  (make-branch  inst machine labels flag pc))
        ((eq? (car inst) 'goto)    (make-goto    inst machine labels pc))
        ((eq? (car inst) 'save)    (make-save    inst machine stack pc))
        ((eq? (car inst) 'restore) (make-restore inst machine stack pc))
        ((eq? (car inst) 'perform) (make-perform inst machine labels ops pc))
        (else (error "Unknown instruction type -- ASSEMBLE" inst))))

(define (advance-pc pc) (set-contents! pc (cdr (get-contents pc))))

(define (make-assign inst machine labels operations pc)
  (let ((target (get-register machine (assign-reg-name inst)))
        (value-exp (assign-value-exp inst)))
    (let ((value-proc (if (operation-exp? value-exp)
                          (make-operation-exp value-exp machine labels operations)
                          (make-primitive-exp (car value-exp) machine labels))))
      (lambda ()                
        (set-contents! target (value-proc))
        (advance-pc pc)))))

(define (assign-reg-name assign-instruction) (cadr assign-instruction))
(define (assign-value-exp assign-instruction) (cddr assign-instruction))

(define (make-test inst machine labels operations flag pc)
  (let ((condition (test-condition inst)))
    (if (operation-exp? condition)
        (let ((condition-proc (make-operation-exp condition machine labels operations)))
          (lambda ()
            (set-contents! flag (condition-proc))
            (advance-pc pc)))
        (error "Bad TEST instruction -- ASSEMBLE" inst))))

(define (test-condition test-instruction) (cdr test-instruction))

(define (make-branch inst machine labels flag pc)
  (let ((dest (branch-dest inst)))
    (if (label-exp? dest)
        (let ((insts (lookup-label labels (label-exp-label dest))))
          (lambda ()
            (if (get-contents flag)
                (set-contents! pc insts)
                (advance-pc pc))))
        (error "Bad BRANCH instruction -- ASSEMBLE" inst))))

(define (branch-dest branch-instruction) (cadr branch-instruction))

(define (make-goto inst machine labels pc)
  (let ((dest (goto-dest inst)))
    (cond ((label-exp? dest)
           (let ((insts (lookup-label labels (label-exp-label dest))))
             (lambda () (set-contents! pc insts))))
          ((register-exp? dest)
           (let ((reg (get-register machine (register-exp-reg dest))))
             (lambda () (set-contents! pc (get-contents reg)))))
          (else (error "Bad GOTO instruction -- ASSEMBLE" inst)))))

(define (goto-dest goto-instruction) (cadr goto-instruction))


(define (make-save inst machine stack pc)
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (lambda ()
      (push stack reg)
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (lambda ()
      (set-contents! reg (pop stack reg))
      (advance-pc pc))))

(define (stack-inst-reg-name stack-instruction) (cadr stack-instruction))

(define (make-perform inst machine labels operations pc)
  (let ((action (perform-action inst)))
    (if (operation-exp? action)
        (let ((action-proc (make-operation-exp action machine labels operations)))
          (lambda ()
            (action-proc)
            (advance-pc pc)))
        (error "Bad PERFORM instruction -- ASSEMBLE" inst))))

(define (perform-action inst) (cdr inst))


(define (make-primitive-exp exp machine labels)
  (cond ((constant-exp? exp)
         (let ((c (constant-exp-value exp)))
           (lambda () c)))
        ((label-exp? exp)
         (let ((insts (lookup-label labels (label-exp-label exp))))
           (lambda () insts)))
        ((register-exp? exp)
         (let ((r (get-register machine (register-exp-reg exp))))
           (lambda () (get-contents r))))
        (else (error "Unknown expression type -- ASSEMBLE" exp))))

(define (register-exp? exp) (tagged-list? exp 'reg))
(define (register-exp-reg exp) (cadr exp))

(define (constant-exp? exp) (tagged-list? exp 'const))
(define (constant-exp-value exp) (cadr exp))

(define (label-exp? exp) (tagged-list? exp 'label))
(define (label-exp-label exp) (cadr exp))

(define (make-operation-exp exp machine labels operations)
  (let ((op (lookup-prim (operation-exp-op exp) operations))
        (aprocs (map (lambda (e) (make-primitive-exp e machine labels))
                     (operation-exp-operands exp))))
    (lambda () (apply op (map (lambda (p) (p)) aprocs)))))

(define (operation-exp? exp) (and (pair? exp) (tagged-list? (car exp) 'op)))
(define (operation-exp-op operation-exp) (cadr (car operation-exp)))
(define (operation-exp-operands operation-exp) (cdr operation-exp))

(define (lookup-prim symbol operations)
  (let ((val (assoc symbol operations)))
    (if val
        (cadr val)
        (error "Unknown operation -- ASSEMBLE" symbol))))

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))