;;+ we need table from 3.25

(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (inputs '())
        (save-restore-regs '())
        (reg-inputs (make-table)))
    (let ((the-ops (list (list 'initialize-stack (lambda () (stack 'initialize)))))
          (register-table (list (list 'pc pc) (list 'flag flag))))
      (define (add-input! reg-name)
        (if (not (memq reg-name inputs))
            (set! inputs (cons reg-name inputs))))
      (define (add-save-restore-reg! reg-name)
        (if (not (memq reg-name save-restore-regs))
            (set! save-restore-regs (cons reg-name save-restore-regs))))
      (define (add-reg-input! reg-name input)
        (let ((this-reg-inputs ((reg-inputs 'lookup) (list reg-name))))
          (if this-reg-inputs
              (if (not (memq input this-reg-inputs))
                  ((reg-inputs 'insert!) (list reg-name) (append (list input) this-reg-inputs)))
              ((reg-inputs 'insert!) (list reg-name) (list input)))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table (cons (list name (make-register name)) register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence) (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations) (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'add-input!) add-input!)
              ((eq? message 'get-inputs) inputs)
              ((eq? message 'add-save-restore-reg!) add-save-restore-reg!)
              ((eq? message 'get-save-restore-regs) save-restore-regs)
              ((eq? message 'add-reg-input!) add-reg-input!)
              ((eq? message 'get-reg-inputs) reg-inputs)
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (add-input! machine reg-name) ((machine 'add-input!) reg-name))
(define (get-inputs machine) (machine 'get-inputs))

(define (add-save-restore-reg! machine reg-name) ((machine 'add-save-restore-reg!) reg-name))
(define (get-save-restore-regs machine) (machine 'get-save-restore-regs))

(define (add-reg-input! machine reg-name input) ((machine 'add-reg-input!) reg-name input))
(define (get-reg-inputs machine) (machine 'get-reg-inputs))

(define (make-goto inst machine labels pc)
  (let ((dest (goto-dest inst)))
    (cond ((label-exp? dest)
           (let ((insts (lookup-label labels (label-exp-label dest))))
             (lambda () (set-contents! pc insts))))
          ((register-exp? dest)
           (let ((reg (get-register machine (register-exp-reg dest))))
             (add-input! machine (register-exp-reg dest))
             (lambda () (set-contents! pc (get-contents reg)))))
          (else (error "Bad GOTO instruction -- ASSEMBLE" inst)))))

(define (make-save inst machine stack pc)
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (add-save-restore-reg! machine (stack-inst-reg-name inst))
    (lambda ()
      (push stack (get-contents reg))
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let ((reg (get-register machine (stack-inst-reg-name inst))))
    (add-save-restore-reg! machine (stack-inst-reg-name inst))
    (lambda ()
      (set-contents! reg (pop stack))
      (advance-pc pc))))

(define (make-assign inst machine labels operations pc)
  (let ((target (get-register machine (assign-reg-name inst)))
        (value-exp (assign-value-exp inst)))
    (add-reg-input! machine (assign-reg-name inst) value-exp)
    (let ((value-proc (if (operation-exp? value-exp)
                          (make-operation-exp value-exp machine labels operations)
                          (make-primitive-exp (car value-exp) machine labels))))
      (lambda ()                
        (set-contents! target (value-proc))
        (advance-pc pc)))))