(define (semaphor n)
  (let ((counter 0)
        (mutex (make-mutex)))
    (define (acquire)
      (if (= counter n)
          (semaphor 'acquire)
          (begin
            (mutex 'acquire)
            (if (= counter n)
                (begin (mutex 'release)
                       (semaphor 'acquire))
                (begin (set! counter (+ counter 1))
                       (mutex 'release))))))
    (define (release)
      (and (> counter 0)
           (begin (mutex 'acquire)
                  (set! counter (- counter 1))
                  (mutex 'release))))
    (define (dispatch m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))))
    dispatch))

(define (semaphor n)
  (let ((counter 0)
        (cell (list false)))
    (define (acquire-cell)
      (if (test-and-set! sell)
          (acquire-cell)))
    (define (acquire)
      (if (= counter n)
          (semaphor 'acquire)
          (begin
            (acquire-cell)
            (if (= counter n)
                (begin (clear! cell)
                       (semaphor 'acquire))
                (begin (set! counter (+ counter 1))
                       (clear! cell))))))
    (define (release)
      (and (> counter 0)
           (begin (acquire-cell)
                  (set! counter (- counter 1))
                  (clear! cell))))
    (define (dispatch m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))))
    dispatch))