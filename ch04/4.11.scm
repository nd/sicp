(define (make-binding var val) (cons var val))
(define (binding-var binding) (car binding))
(define (binding-val binding) (cdr binding))
(define (set-binding-val binding value) (set-cdr! binding value))

(define (make-frame bindings) (list bindings))
(define (frame-bindings frame) (car frame))
(define (set-frame-bindings! frame bindings) (set-car! frame bindings))
(define (frame-variables frame) (map binding-var (frame-bindings frame)))
(define (frame-values frame) (map binding-val (frame-bindings frame)))
(define (add-binding-to-frame! binding frame)
  (set-frame-bindings! frame (cons binding (frame-bindings frame))))

(define (extend-environment bindings base-env) (cons (make-frame bindings) base-env))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings) (evn-loop (enclosing-environment env)))
            ((eq? var (binding-var (car bindings))) (binding-val (car bindings)))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbounded var" var)
        (let ((frame (first-frame env)))
          (scan (frame-bindings frame)))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings) (env-loop (enclosing-environment env)))
            ((eq? var (binding-var (car bindings))) (set-binding-val (car bindings) val))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unknown variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-bindings frame)))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings) (add-binding-to-frame! (make-binding var val) frame))
            ((eq? var (binding-var (car bindings))) (set-binding-val (car bindings)))
            (else (scan (cdr bindings)))))
    (scan (frame-bindings frame))))
