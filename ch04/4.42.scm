(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (liars)
  (let ((betty (list 1 2 3 4 5))
        (etel  (list 1 2 3 4 5))
        (joan  (list 1 2 3 4 5))
        (kitty (list 1 2 3 4 5))
        (marry (list 1 2 3 4 5)))

    (define (get-betty comb) (car comb))
    (define (get-etel comb) (cadr comb))
    (define (get-joan comb) (caddr comb))
    (define (get-kitty comb) (cadddr comb))
    (define (get-marry comb) (cadr (cdddr comb)))

    (filter (lambda (comb)
              (and (or (= (get-kitty comb) 2) (= (get-betty comb) 3))
                   (or (= (get-etel comb) 1)  (= (get-joan comb) 2))
                   (or (= (get-joan comb) 3)
                       (and (> (get-etel comb) (get-kitty comb))
                            (> (get-etel comb) (get-betty comb))
                            (> (get-etel comb) (get-marry comb))
                            (> (get-etel comb) (get-joan  comb))))
                   (or (= (get-kitty comb) 2) (= (get-marry comb) 4))
                   (or (= (get-marry comb) 4) (= (get-betty comb) 1))
                   (distinct? comb)))
            (combinations (list betty etel joan kitty marry)))))

(define (combinations item-lists)
  (if (null? item-lists)
      '()
      (let ((first-list (car item-lists))
            (rest-lists (cdr item-lists)))
        (cond ((null? first-list) '())
              ((null? rest-lists) (map (lambda (el) (list el)) first-list))
              (else (append (map (lambda (l) (cons (car first-list) l)) (combinations rest-lists))
                            (combinations (cons (cdr first-list) rest-lists))))))))
