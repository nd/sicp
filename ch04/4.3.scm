(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        (else
         (let ((op (get 'eval (car exp))))
           (cons ((not (null? op)) (op exp env))
                 ((application? exp) (apply (eval (operator exp) env)
                                           (list-of-values (operands exp) env)))
                 (else (error "Unknown expression type -- EVAL" exp)))))))

(put 'eval '(quote)  (lambda (exp env) (text-of-quotation exp)))
(put 'eval '(set!)   (lambda (exp env) (eval-assignment exp env)))
(put 'eval '(define) (lambda (exp env) (eval-definition exp env)))
(put 'eval '(if)     (lambda (exp env) (eval-if exp env)))
(put 'eval '(begin)  (lambda (exp env) (eval-sequence (begin-actions exp) env)))
(put 'eval '(cond)   (lambda (exp env) (eval (cond->if exp) env)))
(put 'eval '(lambda)      (lambda (exp env) (make-procedure (lambda-parameters exp)
                                                  (lambda-body exp)
                                                  env)))
