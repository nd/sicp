(define (eval exp env)
  (cond ((self-evaluating? exp)  exp)
        ((variable? exp)        (lookup-variable-value exp env))
        ((quoted? exp)          (text-of-quotation exp env))
        ((assignment? exp)      (eval-assignment exp env))
        ((definition? exp)      (eval-definition exp env))
        ((if? exp)              (eval-if exp env))
        ((let? exp)             (eval (let->combination exp) env))
        ((lambda? exp)          (make-procedure (lambda-parameters exp)
                                                (lambda-body exp)
                                                env))
        ((begin? exp)           (eval-sequence (begin-actions exp) env))
        ((cond? exp)            (eval (cond->if exp) env))
        ((application? exp)     (apply (eval (operator exp) env)
                                       (operands exp)
                                       env))
        (else (error "Unknown expression type -- EVAL" exp))))

(define (text-of-quotation exp env)
  (let ((text (cadr exp)))
    (if (list? text)
        (eval (make-lazy-list text) env)
        text)))

(define (make-lazy-list items)
  (if (null? items)
      ''()
      (let ((head (car items)))
        (list 'cons
              (list 'quote head)
              (make-lazy-list (cdr items))))))